const [thresholdAddOpen, setThresholdAddOpen] = React.useState(false);
  const handleOpenThresholdAdd = () => setThresholdAddOpen(true);
  const handleCloseThresholdAdd = () => {
    setThresholdAddOpen(false);
    reset();
  };

  const { mutate: mutateAddThreshold } = useCustomMutation<IThreshold>();


  const handleSubmitThresholdAdd = (data: any) => {
    const parsedData = {
      ...data,
      threshold_min: parseFloat(data.threshold_min),
      threshold_max: parseFloat(data.threshold_max),
    };

    console.log("Form Data:", parsedData);
    mutateAddThreshold(
      {
        url: `${apiUrl}/farms/${id}/threshold/${data.key}`,
        method: "post",
        values: parsedData,
      },
      {
        onError: (error, variables, context) => {
          console.log("Error Adding Threshold: ", error);
        },
        onSuccess: (data, variables, context) => {
          queryClient.invalidateQueries({ queryKey: ["farm_thresholds"] });
          handleCloseThresholdAdd();
        },
      }
    );
  };


  <TabPanel value="2">
                <Stack>
                  <Stack direction={"row"} marginBottom="8px">
                    <CreateButton
                      onClick={handleOpenThresholdAdd}
                      variant="contained"
                    >
                      Add
                    </CreateButton>
                  </Stack>

                  <DataGrid
                    loading={thresholdIsLoading}
                    rows={
                      (threshholds_data?.data || []) as readonly IThreshold[]
                    }
                    checkboxSelection
                    getRowId={(row) => row.threshold_id}
                    columns={thresholdColumns}
                    autoHeight
                    disableRowSelectionOnClick
                    pageSizeOptions={[10, 25, 50, 100]}
                    density="standard"
                    sx={{
                      "& .MuiDataGrid-cell:hover": {
                        cursor: "pointer",
                      },
                    }}
                  />
                </Stack>
              </TabPanel>


                  <Tab label="Thresholds" value="2" />
                  <Tab label="Telemetry" value="3" />

{/*Add Threshold Forms*/}
        <Dialog
          open={thresholdAddOpen}
          onClose={handleCloseThresholdAdd}
          PaperProps={{ sx: { minWidth: 500 } }}
        >
          <DialogTitle>Add Threshold</DialogTitle>
          <DialogContent>
            <form onSubmit={handleSubmit(handleSubmitThresholdAdd)}>
              <Stack gap="10px" marginTop="10px">
                <FormControl>
                  <Controller
                    control={control}
                    name="key"
                    rules={{ required: "Please choose a key" }}
                    render={({ field }) => (
                      <Autocomplete
                        disablePortal
                        id="key_select"
                        options={(key_data?.data || []) as readonly any[]}
                        onChange={(_, value) => {
                          field.onChange(value?.ts_key);
                        }}
                        isOptionEqualToValue={(option, value) =>
                          value === undefined ||
                          option?.ts_key === (value?.ts_key ?? value)
                        }
                        getOptionLabel={(option) => option.ts_key}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Key"
                            margin="normal"
                            variant="outlined"
                            error={!!errors.key}
                            helperText={errors.key?.message}
                            required
                          />
                        )}
                      />
                    )}
                  ></Controller>
                </FormControl>
                <FormControl sx={{ mb: 3 }}>
                  <TextField
                    id="min_value"
                    {...register("threshold_min", {
                      required: "This field is required",
                      pattern: {
                        value: /^-?\d+(\.\d+)?$/,
                        message: "Please enter a valid number",
                      },
                    })}
                    error={!!errors.threshold_min}
                    helperText={errors.threshold_min?.message}
                    margin="normal"
                    fullWidth
                    label="Min Value"
                    name="threshold_min"
                    autoFocus
                  />
                  <FormControl sx={{ mb: 1 }}>
                    <TextField
                      id="max_value"
                      {...register("threshold_max", {
                        required: "This field is required",
                        pattern: {
                          value: /^-?\d+(\.\d+)?$/,
                          message: "Please enter a valid number",
                        },
                      })}
                      error={!!errors.threshold_max}
                      helperText={errors.threshold_max?.message}
                      margin="normal"
                      fullWidth
                      label="Max Value"
                      name="threshold_max"
                      autoFocus
                    />
                  </FormControl>
                </FormControl>
              </Stack>
              <Button type="submit" variant="contained">
                Set
              </Button>
            </form>
          </DialogContent>
        </Dialog>



        <TabPanel value="3">
                <IconButton
                  sx={{
                    transition: "transform 0.3s ease",
                    "&:hover": {
                      transform: "rotate(250deg)",
                    },
                  }}
                  color="success"
                  onClick={() =>
                    queryClient.invalidateQueries(["farm_latest_telemetry"])
                  }
                >
                  <ReplayOutlinedIcon />
                </IconButton>
                <DataGrid
                  loading={telemetryIsLoading}
                  rows={(telemetry_data?.data || []) as readonly ITelemetry[]}
                  getRowId={(row) => row.key}
                  columns={telemetryColumns}
                  autoHeight
                  disableRowSelectionOnClick
                  pageSizeOptions={[10, 25, 50]}
                  density="standard"
                  sx={{
                    "& .MuiDataGrid-cell:hover": {
                      cursor: "pointer",
                    },
                  }}
                />
              </TabPanel>